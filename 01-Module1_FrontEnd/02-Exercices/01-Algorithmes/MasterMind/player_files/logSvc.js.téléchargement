//scCoLib.fDebug = true;
var logSvc = scOnLoads[scOnLoads.length] = {

	// le lecteur est considéré comme inactif au bout de 10 minutes
	fInactivityTimeLaps: 600000,
	fWin: window,
	fDoc: document,

	onLoad: function(e) {
		// on remonte les frames jusqu'à distrib
		var vFrame = parent;
		while(!vFrame.distribEngine && vFrame != vFrame.parent) vFrame = vFrame.parent;
		this.fDistribFrame = vFrame.distribEngine ? vFrame : null;

		// on affecte les loggers sur la frame fille si besoin
		var vInnerFrame = window.scLoadParams && scLoadParams.frameId ? sc$(scLoadParams.frameId) : null;
		if(vInnerFrame) vInnerFrame.addEventListener("load", function(e) {
			logSvc.fWin = vInnerFrame.contentWindow;
			logSvc.fDoc = vInnerFrame.contentDocument;
			logSvc.registerLoggers();
			logSvc.registerActivityHandlers();
		}); 
		else {
			logSvc.registerLoggers();
			logSvc.registerActivityHandlers();
		}
	},

	registerLoggers: function() {
		Array.prototype.forEach.call(logSvc.fDoc.querySelectorAll("video, audio"), function(pMedia) {
			pMedia.addEventListener("play", logSvc.logMediaView);
			pMedia.addEventListener("pause", logSvc.logMediaView);
		});
		logSvc.fDoc.addEventListener("click", logSvc.logClick);
		logSvc.fWin.addEventListener("focus", logSvc.logPageView);
		logSvc.fWin.addEventListener("blur", logSvc.logPageView);
		logSvc.fWin.addEventListener("pagehide", logSvc.logPageView);
		logSvc.fDoc.addEventListener("visibilitychange", logSvc.logPageView);
		if(logSvc.fDistribFrame) logSvc.fDistribFrame.addEventListener("beforeunload", logSvc.logProjectLeave);
		logSvc.logPageView(new CustomEvent("started"));
	},

	// à chaque changement d'onglet/minimisation du navigateur, ou après un laps de temps sans activité sur la page (clic, survol...), on log la durée écoulée depuis :
	// le chargement de la page si c'est le premier log 
	// la reprise d'activité après le dernier log sinon
	registerActivityHandlers: function() {
		logSvc.setActivityTs();

		window.setInterval(function() {
			if(logSvc.fLastActivityTs && Date.now() - logSvc.fLastActivityTs >= logSvc.fInactivityTimeLaps) logSvc.logActivity();		
		}, 1000);


		["click","keydown"].forEach(function(pEventType) {logSvc.fDoc.addEventListener(pEventType, logSvc.setActivityTs);});
		["mousemove","touchstart"].forEach(function(pEventType) {logSvc.fDoc.body.addEventListener(pEventType, logSvc.setActivityTs);});
		["focus"].forEach(function(pEventType) {logSvc.fWin.addEventListener(pEventType, logSvc.setActivityTs);});
		logSvc.fDoc.addEventListener("visibilitychange", function(pEvent) {
			if(document.visibilityState == "hidden") logSvc.logActivity();
			else if(document.visibilityState == "visible") logSvc.setActivityTs();
		});
		logSvc.fWin.addEventListener("beforeunload", logSvc.logActivity);
	},

	setActivityTs: function() {
		logSvc.fLastActivityTs = Date.now();
		if(!logSvc.fFirstActivityTs) logSvc.fFirstActivityTs = logSvc.fLastActivityTs; 
	},

	logActivity : function() {
		if(logSvc.fFirstActivityTs) logSvc.xSendLogMsg({"type":"activity", "duration": Date.now() - logSvc.fFirstActivityTs});
		logSvc.fFirstActivityTs = null;
		logSvc.fLastActivityTs = null;
	},

	logPageView : function (pEvent) {
		var vLogMsg = {"type":"pageView"};
		switch(pEvent.type) {
			case "visibilitychange":
			vLogMsg.action = document.visibilityState;
			break;
			default:
			vLogMsg.action = pEvent.type;
		}
		logSvc.xSendLogMsg(vLogMsg);
	},
	
	logMediaView: function(pEvent) {
		// url du media : pEvent.target.src
		var vLogMsg = {type:"mediaView", action:pEvent.type};
		logSvc.xSendLogMsg(vLogMsg);
	},

	logClick: function(pEvent) {
		// TODO support IE (https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted)
		if(!pEvent.isTrusted) return;
		var vLogMsg = {type:"click"};
		logSvc.xSendLogMsg(vLogMsg);
	},

	logProjectLeave: function(pEvent) {
		var vLogMsg = {type:"projectLeave"};
		logSvc.xSendLogMsg(vLogMsg);
	},

	xSendLogMsg: function(pLogMsg) {
		if(logSvc.fDistribFrame) logSvc.fDistribFrame.distribEngine.sendParticipantMsgs(logSvc.fDistribFrame.distribMgr.getParticipantId(), pLogMsg, false);
		scCoLib.log(pLogMsg);
	} 
};

/*
Polyfill IE>=9
https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
*/
(function () {

  if ( typeof window.CustomEvent === "function" ) return false;

  function CustomEvent ( event, params ) {
	params = params || { bubbles: false, cancelable: false, detail: null };
	var evt = document.createEvent( 'CustomEvent' );
	evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
	return evt;
   }

  window.CustomEvent = CustomEvent;
})();